from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS

from werkzeug.security import generate_password_hash, check_password_hash
import jwt
import datetime


app = Flask(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î Render
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://delivery_db_qr17_user:nX57W4fr3Iqi4PoUdpMOe95lPS4HhAR8@dpg-cvoctr3uibrs73bodhng-a.frankfurt-postgres.render.com/delivery_db_qr17'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
CORS(app, origins="http://localhost:3000")  # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —Å —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞

# üì¶ –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100))
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)
    phone = db.Column(db.String(20), nullable=True)

with app.app_context():
    db.create_all()

# üì• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@app.route('/api/register', methods=['POST'])
def register_user():
    data = request.get_json()
    name = data.get('name')
    email = data.get('email')
    password = data.get('password')
    phone = data.get('phone')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π
    if not name or not email or not password:
        return jsonify({'message': '–ò–º—è, email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π email
    existing_user = User.query.filter_by(email=email).first()
    if existing_user:
        return jsonify({'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 409

    # –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
    hashed_password = generate_password_hash(password)

    new_user = User(name=name, email=email, password=hashed_password, phone=phone)
    db.session.add(new_user)
    db.session.commit()

    return jsonify({'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', 'user_id': new_user.id})

# üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤
SECRET_KEY = 'your_secret_key'  # –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á

@app.route('/api/login', methods=['POST'])
def login_user():
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')

    if not email or not password:
        return jsonify({'message': 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    user = User.query.filter_by(email=email).first()

    if not user:
        return jsonify({'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    if not check_password_hash(user.password, password):
        return jsonify({'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'}), 401

    # –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ —Å —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è 1 —á–∞—Å
    token = jwt.encode({
        'user_id': user.id,
        'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=1)
    }, SECRET_KEY, algorithm='HS256')

    return jsonify({'message': '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞', 'token': token})
  
 